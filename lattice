//-----------------------------------------------------
// Lattices in magma
//
// Aims : Determine if L1 can be embedded into L2
//        Compute T0,  the orthogonal complement of T  in E8
//        Compute T18, the orthogonal complement of T0 in Niemeier lattice


Attach("surf_latt.m"); // MJS surf package (renamed to avoid clash)
                       // https://github.com/immir/surfaces/blob/master/surf.m

//-----------------------------------------------------
// --- define ADE and Leech lattices
//
A  := func<n | Lattice("A",n)>;
D  := func<n | Lattice("D",n)>;
E  := func<n | Lattice("E",n)>;
LL := func<n | Lattice("Lambda",n)>; // Leech is n=24


//-----------------------------------------------------
// --- build a lattice w.r.t. abstract basis
//
A2  := LatticeWithGram(GramMatrix(A(2)));
A4  := LatticeWithGram(GramMatrix(A(4)));
D6  := Lattice(LatticeDatabase(), "D6");
E6  := Lattice(LatticeDatabase(), "E6");
E7  := Lattice(LatticeDatabase(), "E7");
E8  := Lattice(LatticeDatabase(), "E8");
E8b := LatticeWithGram(GramMatrix(E(8)));


//-----------------------------------------------------
// --- related lattices, dual, discriminant group
//
print "A4*    = ", DualBasisLattice(A4);
DQ := DualQuotient(A4);
print "A4*/A4 = ", DQ; 


//-----------------------------------------------------
// --- compose positive definite lattices
//
L1 := DirectSum(A4,E8);
L2 := OrthogonalSum(E8,A4);
flag :=  IsIsometric(L2,L1);
print "L1 == L2            :", flag;


//-----------------------------------------------------
// --- compose indefinite lattices --- poor man's "@"
//
Oplus := function(L,M)

  GL := GramMatrix(L);
  GM := GramMatrix(M);
  GL := ChangeRing(GL,Rationals());
  GM := ChangeRing(GM,Rationals());
  GS := DirectSum(GL,GM);
  LoplusM := LatticeWithGram(GS : CheckPositive := false);
  return LoplusM;

end /* safe */ function;


M2 := Matrix(Rationals(),2,2,[0,1,1,0]);
U2 := LatticeWithGram(M2: CheckPositive := false);
U2 := ChangeRing(U2,Rationals());
L1 := Oplus(U2,E8);
L2 := Oplus(E8,U2);
//IsIsometric(L1,L2); // FAIL !!!
print "Det(L1) == Det(L2)  :", Determinant(L1) eq Determinant(L2);

U_3  := Oplus(Oplus(U2,U2),U2);
E8E8 := Oplus(E8,E8);
H2   := Oplus(U_3,E8E8);


//-----------------------------------------------------
// --- check if M < L is a primitive sublattice
//
is_primitive := function(L,M)

  T := TorsionSubgroup(quo<L|M>);
  if #T eq 1 then
    return true;
  else
    return false;
  end if;

end /*safe */ function;


//-----------------------------------------------------
// Compute all the images of q_T : G_T --> Q;
//                                  x  |-> (x,x) mod 2Z
//
discriminant_form_images := function(T)

  G_T,Lx,phi    := DualQuotient(T);

  vec_val_list  := [];
  values   := [];
  for g in G_T do
    vec := g @@ phi;
    val := (vec,vec);
    num := Numerator( val );
    den := Denominator( val );
    Append(~vec_val_list, <vec,(num mod (2*den))/den> );
    Append(~values, (num mod (2*den))/den );
  end for;

  return Sort(values),Sort(vec_val_list);
end /* safe */ function;


have_same_disc_form_images := function(T,T0);

  G_T,Lx,phi    := DualQuotient(T);
  values   := [];
  for g in G_T do
    vec := g @@ phi;
    val := (vec,vec);
    num := Numerator( val );
    den := Denominator( val );
    Append(~values, (num mod (2*den))/den );
  end for;

  G_T0,L0x,phi0    := DualQuotient(T0);
  values0   := [];
  for g in G_T0 do
    vec := g @@ phi0;
    val := (vec,vec);
    num := -Numerator( val ); // N.B.  q_T = -q_T0  !!!
    den := Denominator( val );
    Append(~values0, (num mod (2*den))/den );
  end for;

  if Sort(values) eq Sort(values0) then
    return true;
  else
    return false;
  end if;

end /*safe */ function;


//-----------------------------------------------------
/* Immir:

   First, DualQuotient(L) can return the quotient group Q together
   with the "unscaled dual lattice" L^# and "natural epimorphism"
   phi: L^# -> Q. 
*/
have_isometric_disc_gps := function(T,T0)

  G_T,Lx,phi    := DualQuotient(T);
  G_T0,Lx0,phi0 := DualQuotient(T0);

  /* G_T and G_T0 are isomorphic as abelian groups, but since
     #Aut(G_T) = 192, there are 192 different isomorphisms between
     them (for any given isomorphism, one can compose with an
     automorphism to get another).

     So, we can ask Magma for a given isomorphism: 
  */

  _,rho := IsIsomorphic(G_T, G_T0);

  /* But we need the isomorphism to preserve the inner product, so
     let's check them all...
     NB: Apparently you cannot iterate over the automorphism group A,
         so we take a permutation representation for it and iterate
         over that, mapping back to A using @@
  */

  A  := AutomorphismGroup(G_T);
  pi := PermutationRepresentation(A);

  // --- inner product on G_T:
  M := Matrix([[ (G_T.i @@ phi, G_T.j @@ phi) : i in [1,2]] : j in [1,2]]);

  found := false;
  for p in Image(pi) do
    rr := (p @@ pi) * rho;
    // --- inner products of images of G_T in G_T0
    M0 := Matrix([[ (rr(G_T.i) @@ phi0, rr(G_T.j) @@ phi0)
                  : i in [1,2]] : j in [1,2]]);
    if M eq M0 then
      print "found an isomorphism using perm:", p;
      return true;
    end if;
  end for;
  return false;
end /* safe */ function;


//-----------------------------------------------------
// --- embed lattice L into the overlattice M (Immir)
//
embed_recursive := function (G_L, M, vec_len, curr)
  n := Rank(G_L);
  if #curr eq n then // we've extended to a full basis agreeing with G_L!
    return is_primitive(M,curr), curr; // check is primitive (jackpot)
  end if;
  // otherwise, attempt to find the next vector, number i:
  i := #curr + 1;
  // of this norm:  
  norm := G_L[i][i];
  // find list of suitable vectors to add, ensuring inner products
  // with ealier ones agrees with G_L:
  valid := [ v : v in vec_len[norm] |
                 forall{ j : j in [1..#curr] |
                    (v, curr[j]) eq G_L[i][j] } ];
  for v in valid do
     // add each valid choice and call this function again to try and extend
     match, curr2 := $$(G_L, M, vec_len, curr cat [v]);
     if match then // if match true we got all the way: return the answer
       return true, curr2;
     end if;
  end for;
  return false, []; // invalid branch of recursion; return false to flag that
end /* safe */ function;


//-----------------------------------------------------
// --- embed lattice L into overlattice M (Immir)
//
embed := function(L, M)
  norms := [Norm(a) : a in Basis(L)];
  vec_len := AssociativeArray(Integers());
  for norm in Set(norms) do
    vecs := ShortVectors(M, norm);
    vecs := [v[1] : v in vecs | v[2] eq norm];
    vec_len[norm] := vecs;
  end for;
  G_L := GramMatrix(L);
  return embed_recursive(G_L, M, vec_len, []);
end /* safe */ function;


old_embed_into_E8 := function(L : NumberOfSolutions := 1)
  
  // --- compute the sets of vectors of each possible diagonal of GramMatrix(L)
  norms := [Norm(a) : a in Basis(L)];
  vec_len := AssociativeArray(Integers());
  for norm in norms do
    vecs := ShortVectors(E8,norm);
    vecs := [v[1] : v in vecs | v[2] eq norm];
    vec_len[norm] := vecs;
  end for;
  
  // --- exhaust over each diagonal list
  basis_list := [];
  count := 0;
  for v1 in vec_len[norms[1]] do
    for v2 in vec_len[norms[2]] do
      count := count + 1;
      basis := [v1,v2];
      if InnerProduct(v1,v2) eq GramMatrix(L)[1][2] then
        if is_primitive(E8,basis) then
          basis_list := basis_list cat [basis];
          if #basis_list ge NumberOfSolutions then
            if NumberOfSolutions eq 1 then
              return basis;
            else
              return basis_list;
            end if;
          end if;
        end if;
      end if;
    end for;
  end for;

  return "FAIL";

end /* safe */ function;


//-----------------------------------------------------
// --- compute the orthogonal complement  (MJS)
//
LatticePerp := function(L, S)

  NOT := NullspaceOfTranspose(Matrix(
                [[ (v,s) : v in Basis(L) ] : s in Basis(S) ]));

  P := sub< L | BasisMatrix(NullspaceOfTranspose(Matrix(                    
              [[ (v,s) : v in Basis(L) ] : s in Basis(S) ]))) 
              * BasisMatrix(L) >;
  B := Basis(S) cat Basis(P);
  return P, Matrix([[(u,v):u in B] : v in B]);

end /* safe */ function;


//-----------------------------------------------------
//
IsEvenMatrix := function(M)
  return &and[IsEven(Integers()!M[i,i]) : i in [1..NumberOfRows(M)]];
end /* safe */ function;


//-----------------------------------------------------
// What is the signature a matrix
//
signature := function(M)
  M1 := ChangeRing(M, RealField());
  evals := Eigenvalues(M1);
  r_p := 0;
  r_n := 0;
  for e in evals do
    if Sign(e[1]) gt 0 then
      r_p := r_p + e[2];
    elif Sign(e[1]) lt 0 then
      r_n := r_n + e[2];
    end if;
  end for;
  return [r_p,r_n];
end /* safe */ function;

print "signature(H2) = (#+, #-) = ",signature(GramMatrix(H2));


//-----------------------------------------------------
//
coxeter_number := function(L)
  return #ShortVectors(L,2)*5/60;
end /* safe */ function;


//-----------------------------------------------------
//
rootlattice := function(L)
  G := GramMatrix(L);
  roots := ShortVectors(L,2);
  r1 := sub < L | [r[1] : r in roots ] >;
  return r1;
end /* safe */ function;


//-----------------------------------------------------
// --- Embed T := T_{S3} into E8
//     Compute T0 = i(T)^perp in E8
//
T := LatticeWithGram(Matrix(Rationals(),2,2,[4,0,0,12]));
print "\n***** Transcendental lattice(S3) ...";
print "GramMatrix =", GramMatrix(T);
_,T2   := embed(T,E8);
T2     := sub<E8 | T2>;
print "Gram(T)  == Gram(T2)   :",GramMatrix(T2) eq GramMatrix(T);


// --- T0 == Orthogonal complement of T_{S3} in E8
T0   := LatticePerp( E8, T2 );
T0m1 := LatticeWithGram(-GramMatrix(T0) : CheckPositive := false);
print "Det(T2)  == Det(T0)    :", Determinant(T2) eq Determinant(T0);
print "Rank(T2) == 8-Rank(T0) :", Rank(T2) eq 8-Rank(T0);


// --- Did we get A2 (+) A3 (+) <4> 
A2A3   := Oplus(A(2),A(3));
L      := LatticeWithGram(Matrix(Rationals(),1,1,[4]) : CheckPositive := false);
A2A3_4 := Oplus(A2A3,L);
flag   := IsIsometric(T0,A2A3_4);
print "A2A3<4>  == T0         :", flag; // Yes we did !


// --- Check conditions (i), (ii), (iii) on page 18 BKW
print "(i)   IsEven(T0)       :", IsEven(T0);
print "(ii)  sig(T0) == [6,0] ?", signature(GramMatrix(T0)) eq [6,0];
print "(iii) Show (G_T, q_T) is isometric to (G_T0, -q_T0)";
G_T    := DualQuotient(T);
G_T0   := DualQuotient(T0);
print "      is_isomorphic(G_T, G_T0)        ?",  IsIsomorphic(G_T,G_T0);
print "      images(q_T) == images(-q_T0)    ?", have_same_disc_form_images(T,T0);
print "      (G_T, q_T) ~ (G_T0,  q_T0)      ?", have_isometric_disc_gps(T,T0);
print "      (G_T, q_T) ~ (G_T0[-1],q_T0[-1])?", have_isometric_disc_gps(T,T0m1);


//-----------------------------------------------------
// Construct all 24 Niemeier lattices 
// D24 is a missing one in magma ... obtained from Gabby Nebe's site
//          http://www.math.rwth-aachen.de/~Gabriele.Nebe/LATTICES/
//
T24 := [*
[2],
[1, 2],
[1, 1, 2],
[1, 1, 1, 2],
[1, 1, 1, 1, 2],
[1, 1, 1, 1, 0, 2],
[1, 1, 1, 1, 1, 1, 2],
[1, 1, 1, 1, 1, 1, 1, 2],
[1, 1, 1, 1, 1, 1, 1, 1, 2],
[0, 0, 0, 0,-1, 1, 0, 0, 0, 2],
[0, 0, 0, 0, 1,-1, 0, 0, 0,-1, 2],
[0, 0, 0, 0, 1,-1, 0, 0, 0,-1, 1, 2],
[0, 0, 0, 0, 1,-1, 0, 0, 0,-1, 1, 1, 2],
[0, 0, 0, 0, 1,-1, 0, 0, 0,-1, 1, 1, 1, 2],
[0, 0, 0, 0,-1, 1, 0, 0, 0, 1,-1,-1,-1,-1, 2],
[0, 0, 0, 0, 1,-1, 0, 0, 0,-1, 1, 1, 1, 1,-1, 2],
[0, 0, 0, 0, 1,-1, 0, 0, 0,-1, 1, 1, 1, 1,-1, 1, 2],
[0, 0, 0, 0, 1,-1, 0, 0, 0,-1, 1, 1, 1, 1,-1, 1, 1, 2],
[0, 0, 0, 0, 1,-1, 0, 0, 0,-1, 1, 1, 1, 1,-1, 1, 1, 1, 2],
[0, 0, 0, 0, 1,-1, 0, 0, 0,-1, 1, 1, 1, 1,-1, 1, 1, 1, 1, 2],
[0, 0, 0, 0, 1,-1, 0, 0, 0,-1, 1, 1, 1, 1,-1, 1, 1, 1, 1, 1, 2],
[0, 0, 0, 0, 1,-1, 0, 0, 0,-1, 1, 1, 1, 1,-1, 1, 1, 1, 1, 1, 1, 2],
[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,-1,-1,-1, 0,-1, 0,-1, 6],
[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0,-1,-1, 0,-1, 0,-1, 5, 6]
*];

D24 := ZeroMatrix(Integers(),24,24);
for r in [1..24] do
  for c in [1..r] do
    D24[r,c] := T24[r][c];
  end for;
end for;
U24 := Transpose(D24);
for i in [1..24] do
  U24[i][i] := 0;
end for;
D24 := D24 + U24;

N_D24 := LatticeWithGram(D24);
LDB   := LatticeDatabase();
print "\n***** Niemeier lattices ...";
show_magma_db := function()
  for i in [1..#LDB] do
    L := Lattice(LDB,i);
    if IsEven(L) and Rank(L) eq 24 and Abs(Determinant(L)) eq 1 then
      print <i,LatticeName(LDB,i)>;
    end if;
  end for;
end /* safe */ function;
// show_magma_db();

print "Add in the one missing in magma, and the Leech lattice ...";
N       := [N_D24] cat [Lattice(LDB,i) : i in [448 .. 469]] cat [LL(24)];
root_NL := [rootlattice(N[i]) : i in [1..24]];

/*
for i in [1..#N] do
  L := N[i];
  print <i,Determinant(L), signature(GramMatrix(L)), coxeter_number(L),Order(L/rootlattice(L))>;
end for;
*/

// --- Create a mapping to Table 2 of the BKW paper (page 20)
//
BKW_Table1 := AssociativeArray(Strings());
BKW_Table1["alpha"]   := "N(D24)";
BKW_Table1["beta"]    := "N(D16_E8)";
BKW_Table1["gamma"]   := "N(3E8)";
BKW_Table1["delta"]   := "N(A24)";
BKW_Table1["epsilon"] := "N(2D12)";
BKW_Table1["zeta"]    := "N(A17_E7)";
BKW_Table1["eta"]     := "N(D10_2E7)";
BKW_Table1["theta"]   := "N(A15_D9)";
BKW_Table1["iota"]    := "N(3D8)";
BKW_Table1["kappa"]   := "N(2A12)";
BKW_Table1["lambda"]  := "N(A11_D7_E6)";
BKW_Table1["mu"]      := "N(4E6)";
BKW_Table1["nu"]      := "N(2A9_D6)";
BKW_Table1["xi"]      := "N(4D6)";
BKW_Table1["omicron"] := "N(3A8)";
BKW_Table1["pi"]      := "N(2A7_2D5)";
BKW_Table1["rho"]     := "N(4A6)";
BKW_Table1["sigma"]   := "N(4A5_D4)";
BKW_Table1["tau"]     := "N(6D4)";
BKW_Table1["upsilon"] := "N(6A4)";
BKW_Table1["phi"]     := "N(8A3)";
BKW_Table1["chi"]     := "N(12A2)";
BKW_Table1["psi"]     := "N(24A1)";
NL := func< str | Lattice(LDB, BKW_Table1[str])>;
N[12] eq NL("rho"); // *sigh* need to fix alpha since it is not in Magma DB!


//-----------------------------------------------------
// --- embed T0 into a Niemeier lattice  
//
print "\n>>> Embed T0 into all possible Niemeier lattices ... and perp";
for i in [1..24] do
  print "Niemeier lattice # :",i;
  print " Det(N[i])         =", Determinant(N[i]);
  print " [N[i]:root(N[i])] =", Index(N[i],rootlattice(N[i]));
  flag,B := embed(T0,N[i]);
  print " T0 `---> N[i]     ?",flag;
  if flag then
    G := Matrix(Integers(),6,6,[(B[i],B[j]) : i,j in [1..6]]);
    is_iso := IsIsometric(LatticeWithGram(G),A2A3_4);
    print " Is A2A3(4) type   ?", is_iso;
    // --- Orthogonal complement of T0 in N(i)
    iT0 := sub<N[i] | B>;
    print " Rank(i(T0))       =", Rank(iT0);
    T18 := LatticePerp( N[i], iT0 );
    print " i(T0)^perp        =", Rank(T18);
  end if;
end for;


//assert 1 eq 0; // Just STOP here ... 


//-----------------------------------------------------
// NS(S3) ... from picard_group.m ...
//
G_S3 := Matrix(Integers(),20,20,
 [
  [-2, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
  [ 0,-2, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
  [ 1, 0,-2, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
  [ 0, 1, 0,-2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
  [ 1, 1, 0, 0,-2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],
  [ 1, 1, 0, 0, 0,-2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
  [ 0, 0, 1, 1, 1, 0,-2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
  [ 0, 0, 1, 1, 0, 1, 0,-2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
  [ 1, 0, 0, 0, 0, 0, 0, 0,-2, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1],
  [ 0, 1, 0, 0, 0, 0, 0, 0, 0,-2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0],
  [ 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,-2, 0, 0, 1, 0, 0, 0, 0, 0, 0],
  [ 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0,-2, 0, 0, 0, 0, 0, 0, 0, 0],
  [ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-2, 0, 1, 1, 1, 0, 0, 0],
  [ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,-2, 0, 1, 0, 0, 0, 0],
  [ 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,-2, 0, 0, 0, 0, 1],
  [ 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,-2, 0, 1, 1, 1],
  [ 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,-2, 0, 0, 0],
  [ 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,-2, 0, 0],
  [ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,-2, 1],
  [ 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,-2]
 ]
);

NS_S3 := LatticeWithGram(G_S3 : CheckPositive := false );


print "\n-----------------------------------------------";
print "NS_S3 ... ";
print "  rank      =", Rank(NS_S3);
print "  det.      =", Determinant(NS_S3);
print "  sign.     =", signature(GramMatrix(NS_S3));
A_S3, map_S3 := DualQuotient(NS_S3);
print "  disc. gp. =", A_S3;

G_T  := DualQuotient(T);
G_NS := DualQuotient(NS_S3);
print "  is_isomorphic(G_T, G_NS)    ?", IsIsomorphic(G_T,G_NS);


//-----------------------------------------------------
// Putative Transcendental lattices ... corresponding to NS_S3
T1 := LatticeWithGram(Matrix(Integers(),2,2,[2,0,0,24]));
T2 := LatticeWithGram(Matrix(Integers(),2,2,[4,0,0,12]));
T3 := LatticeWithGram(Matrix(Integers(),2,2,[8,4,4,8]));
T4 := LatticeWithGram(Matrix(Integers(),2,2,[6,0,0,8]));


print "\n-----------------------------------------------";
print "Putative T_S3 : ...";
T := [T1,T2,T3,T4];
[IsIsometric(T[i],T[j]) : j in [i+1..4], i in [1..3] | i ne j];

[Rank(GramMatrix(T)) : T in [T1,T2,T3,T4]];
[Determinant(GramMatrix(T)) : T in [T1,T2,T3,T4]];
[signature(GramMatrix(T)) : T in [T1,T2,T3,T4]];
[SmithForm(GramMatrix(T)) : T in [T1,T2,T3,T4]];
[DualQuotient(T) : T in [T1,T2,T3,T4]];

// Since q_NS = -q_T ... we need to compute the quadratic form
//                       to decide which is correct
print "  images(q_NS) == images(-q_T1)?", have_same_disc_form_images(T1,NS_S3);
print "  images(q_NS) == images(-q_T2)?", have_same_disc_form_images(T2,NS_S3);
print "  images(q_NS) == images(-q_T3)?", have_same_disc_form_images(T3,NS_S3);
print "  images(q_NS) == images(-q_T4)?", have_same_disc_form_images(T4,NS_S3);



//-----------------------------------------------------
// Compute the Automorphism Group of the Neron-Severi lattice !!!!!!!!!
Attach("AutHyp.m");

test_AutHyp := function()
  print "=================================================\n";
  eg := SymmetricMatrix([2,3,3,1,1,4]);
  time pp := GetPerfectPoints(eg);
  print "Trivial ... ", pp`AutGrp;

  print "=================================================\n";
  time pp := GetPerfectPoints(GramMatrix(U2 @ A(1)));
  print "Aut( U2 (+) A1 ) ... ", pp`AutGrp;

  print "=================================================\n";
  time pp := GetPerfectPoints(GramMatrix(U2 @ A(2)));
  print "Aut( U2 (+) A2 ) ... ", pp`AutGrp;

  print "=================================================\n";
  time pp := GetPerfectPoints(GramMatrix(U2 @ A(3)));
  print "Aut( U2 (+) A3 ) ... ", pp`AutGrp;

  //print "=================================================\n";
  //time pp := GetPerfectPoints(GramMatrix(U2 @ E8));
  //print "Aut( U2 (+) E8 ) ... ", pp`AutGrp;     // doh ... consumed 8GB

  //print "=================================================\n";
  //pp := GetPerfectPoints(-GramMatrix(NS_S3)); // doh ... consumed 8GB
  //print "Real thing ... ", pp`AutGrp;

  return "DONE";
end /* safe */ function;
//test_AutHyp();


U3 := Oplus(U2,Oplus(U2,U2));
U3two := LatticeWithGram(2*GramMatrix(U3) : CheckPositive := false);


vectors_of_length_indef := function(U, len, limit)
  n := Rank(U);
  B := Basis(U);
  G := AbelianGroup([2*limit+1 : i in [1..n]]); // [-limit..limit] gauge

  list_len := [];
  vecs_len := [];

  for g in G do
    a   := [i-limit : i in Eltseq(g)];
    vec := &+[a[i] * B[i] : i in [1..n]];
    if (vec,vec) eq len then
      Append(~list_len, a);
      Append(~vecs_len, vec);
    end if;
  end for;

  return list_len, vecs_len;
end /* safe */ function;


vectors_in_U3_length := function(n,L)
  B := Basis(U3);
  list_n := [];
  vecs_n := [];
  for a in [-L..L] do
  for b in [-L..L] do
  for c in [-L..L] do
      for d in [-L..L] do
  for e in [-L..L] do
  for f in [-L..L] do
    v := a*B[1]+b*B[2]+c*B[3]+d*B[4]+e*B[5]+f*B[6];
    if (v,v) eq n then
      Append(~list_n,[a,b,c,d,e,f]);
      Append(~vecs_n,v);
    end if;
  end for;
  end for;
  end for;
  end for;
  end for;
  end for;
  return list_n,vecs_n;
end /* safe */ function;


vectors_in_U3two_length := function(n,L)
  B := Basis(U3two);
  list_n := [];
  vecs_n := [];
  for a in [-L..L] do
  for b in [-L..L] do
  for c in [-L..L] do
      for d in [-L..L] do
  for e in [-L..L] do
  for f in [-L..L] do
    v := a*B[1]+b*B[2]+c*B[3]+d*B[4]+e*B[5]+f*B[6];
    if (v,v) eq n then
      Append(~list_n,[a,b,c,d,e,f]);
      Append(~vecs_n,v);
    end if;
  end for;
  end for;
  end for;
  end for;
  end for;
  end for;
  return list_n,vecs_n;
end /* safe */ function;

embed_into_U3 := function(N,n)
  diag := Diagonal(N);
  list := AssociativeArray(Integers());
  vecs := AssociativeArray(Integers());
  for d in diag do
    if n eq 1 then
      ls,vs   := vectors_in_U3_length(d,2);
    elif n eq 2 then
      ls,vs   := vectors_in_U3two_length(d,2);
    end if;
    vecs[d] := vs;
    list[d] := ls;
  end for;

// i1 up to 561
  for i1 in [1..#vecs[diag[1]]] do
    v1 := vecs[diag[1]][i1];
    for i2 in [1..#vecs[diag[2]]] do
      v2 := vecs[diag[2]][i2];
      if (v1,v2) eq N[1,2] then
        for i3 in [1..#vecs[diag[3]]] do
          v3 := vecs[diag[3]][i3];
          if (v1,v3) eq N[1,3] and (v2,v3) eq N[2,3] then
            for i4 in [1..#vecs[diag[4]]] do
              v4 := vecs[diag[4]][i4];
              if (v1,v4) eq N[1,4] and (v2,v4) eq N[2,4] and (v3,v4) eq N[3,4] then
                V  := [v1,v2,v3,v4];
                IPM := Matrix(Integers(),4,4,[(u,v) : u in V, v in V]);
                if IPM eq N then
                  l1 := list[diag[1]][i1];
                  l2 := list[diag[2]][i2];
                  l3 := list[diag[3]][i3];
                  l4 := list[diag[4]][i4];
                  // --- test for primitivity ---
                  if n eq 1 then
                    LNSA := sub<U3 | v1,v2,v3,v4 >;
                    if is_primitive(U3, LNSA) then
                      print "WOO HOO";
                      print IPM;
                      print [v1,v2,v3,v4];
                      print [l1,l2,l3,l4];
                      print [i1,i2,i3,i4];
                      return [l1,l2,l3,l4], [v1,v2,v3,v4];
                    end if;
                  elif n eq 2 then
                    LNSA := sub<U3two | v1,v2,v3,v4 >;
                    if is_primitive(U3two, LNSA) then
                      print "WOO HOO";
                      print IPM;
                      print [v1,v2,v3,v4];
                      print [l1,l2,l3,l4];
                      print [i1,i2,i3,i4];
                      return [l1,l2,l3,l4], [v1,v2,v3,v4];
                    end if;
                  end if;
                  print "non-primitive embedding : ",i1,i2,IPM, "\n";
                  return LatticePerp(U3, LNSA);
                end if; 
              end if; 
            end for;
          end if;
        end for;
      end if;
    end for;
  end for;
      
  return "FAIL",#vecs[diag[1]],#vecs[diag[2]],#vecs[diag[3]],#vecs[diag[4]];
end /* safe */ function;
  

M := SymmetricMatrix(Integers(),[-4,0,10,0,-8,10,0,-4,4,4]);
embed_into_U3(M,1);

// M2 := 2*M; embed_into_U3(M2,2);

B  := Basis(U3);
v1 :=  2*B[1] - 2*B[2];
v2 := -3*B[1] - 3*B[2] + B[3] +  B[4] - 8*B[5];
v3 :=  3*B[1] + 3*B[2] + B[3] +  B[4]; 
v4 :=                          8*B[4] + 2*B[5] + 2*B[6];
V  := [v1,v2,v3,v4];
IPM := Matrix(Integers(),4,4,[(u,v) : u in V, v in V]);
print IPM;



M  := Matrix(Integers(),4,4,[2,0,0,0, 0,0,1,2, 0,1,0,-2, 0,2,-2,-2]);
ls,vs := embed_into_U3(M,1);
B  := Basis(U3);
v1 := &+[ls[1][i]*B[i] : i in [1..6]];
v2 := &+[ls[2][i]*B[i] : i in [1..6]];
v3 := &+[ls[3][i]*B[i] : i in [1..6]];
v4 := &+[ls[4][i]*B[i] : i in [1..6]];
V  := [v1,v2,v3,v4];
IPM := Matrix(Integers(),4,4,[(u,v) : u in V, v in V]);
print IPM;




A := LatticePerp(U3, sub<U3 | V>);
B := Basis(A);
(B[1],B[1]);
(B[1],B[2]);
(B[2],B[2]);

*/
