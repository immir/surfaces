
Attach("surf.m");

L := Lattice(LatticeDatabase(), "E8");
Determinant(L); // unimodular

S := sub< L | [0,1,0,0,0,0,0,1], [1,1,0,0,0,0,2,0] >;
GramMatrix(S);
T := LatticePerp(L, S);

LL := S + T;
Determinant(LL); // not unimodular
G,LLdual,rho := DualQuotient(LL);
G;
LLdual;

q := func< x | z - 2*Truncate(z/2) where z is Norm(x @@ rho) >;
q(G.1);
q(G.2);
q(G.3);
q(G.4);

{* q(x) : x in G *};

b := func< x,y | Sign(z)*(Abs(z) - Truncate(Abs(z)))
                    where z is 1/2*(q(x+y) - q(x) - q(y)) >;

GCD(Order(G.1), Order(4*G.3));
b(G.1, 4*G.3);

A := AutomorphismGroup(G);
exists(a){ a : a in Generators(A) | &and { q(x) eq q(x @ a) : x in G } };
a; // an isometry!
